% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extras_rdb.R
\name{rdb_db_write}
\alias{rdb_db_write}
\title{Grava dados em um banco via ODBC}
\usage{
rdb_db_write(
  con,
  data,
  name,
  schema = "dbo",
  method = "dbi",
  chunk_size = 5999,
  verbose = TRUE,
  append = FALSE
)
}
\arguments{
\item{con}{Conexao ativa odbc. Veja \code{\link[DBI]{dbConnect}} para mais detalhes}

\item{data}{Objeto de dados. Pdoe ser data.frame ou qualquer objeto que se posssa converter em data.frame}

\item{name}{String de nome da tabela que vai ser grabada no banco com os dados do objeto 'data'}

\item{schema}{String de nome do schema do banco de dados que deseja salvar. Padrao e 'dbo'}

\item{method}{String com um entre os valoes 'dbi' ou 'copy'. Vaje details para mais informacoes.}

\item{chunk_size}{Define o total de linhas que cada lote salvara no banco por vez.}

\item{verbose}{Se TRUE que mostra todo o log do processo ou apenas algumas partes.}

\item{append}{Se TRUE e a tabela ja existir no banco de dados ele tenta apendar os dados.}
}
\description{
Recebe parametros de uma conexao odbc ativa e exporta uma base de dados
como data.frame, tibbla, matriz ou data.table subindo por partes.
}
\details{
A configuracao dos tipos de dados e feita atraves de metodos do pacote DBI,
dplyr e dbplyr. Existem duas formas de salvar dados no banco de dados. Se a escolha for
method = 'dbi' o R tentara salvar a base de dados em parte utilizando methodos do pacote DBI,
caso method = 'copy' ele tentara salvar os dados de uma unica vez sem quebra em partes.
Este metodo pode evitar problemas com tipos de dados, mas costuma ser custoso computacionalmente.
Para mais detalhes ver \code{\link[DBI]{dbWriteTable}}, \code{\link[dplyr]{copy_to}} e
\code{\link[dbplyr]{in_schema}}.
}
